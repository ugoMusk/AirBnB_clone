#!/usr/bin/python3
"""
"""
dots_cmds = ["all"]
def precmd(self, line):
        """Reformat command line for advanced command syntax.
Usage: <class name>.<command>([<id> [<*args> or <**kwargs>]])(Brackets denote optional fields in usage example.\
)"""
        _cmd = _cls = _id = _args = ''  # initialize line elements

        # check for  '.', '(', ')' in line
        if not ('.' in line and '(' in line and ')' in lin\
e):
                return line
        try:
                # parse line left to right
                pline = line[:]  # parsed line

                # isolate <class name>
            _cls = pline[:pline.find('.')]

            # isolate and validate <command>
            _cmd = pline[pline.find('.') + 1:pline.find('(\
')]
            if _cmd not in dot_cmds:
                raise Exception

            # if parantheses contain arguments, parse them
            pline = pline[pline.find('(') + 1:pline.find('\
)')]
            if pline:
                # partition args: (<id>, [<delim>], [<*arg\
s>])
                pline = pline.partition(', ')  # pline con\
vert to tuple

                # isolate _id, stripping quotes
                _id = pline[0].replace('\"', '')
                # possible bug here:
                # empty quotes register as empty _id when \
replaced

                # if arguments exist beyond _id
                pline = pline[2].strip()  # pline is now s\
tr
                if pline:
                    # check for *args or **kwargs
                    if pline[0] == '{' and pline[-1] == '}\
'\
                            and type(eval(pline)) is dict:
                        _args = pline
                    else:
                        _args = pline.replace(',', '')
                        # _args = _args.replace('\"', '')
            line = ' '.join([_cmd, _cls, _id, _args])

        except Exception as mess:
            pass
        finally:
            return line
